// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/drawiin/go-orders-service/internal/event"
	"github.com/drawiin/go-orders-service/internal/infra/db"
	"github.com/drawiin/go-orders-service/internal/infra/graph"
	"github.com/drawiin/go-orders-service/internal/infra/grpc/service"
	"github.com/drawiin/go-orders-service/internal/infra/repository"
	"github.com/drawiin/go-orders-service/internal/infra/web/web_handler"
	"github.com/drawiin/go-orders-service/internal/usecase"
	"github.com/drawiin/go-orders-service/pkg/events"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewWebOrderHandler(db2 db.DBTX, eventDispatcher events.EventDispatcherInterface) *web_handler.WebOrderHandler {
	queries := db.New(db2)
	orderRepository := repository.NewOrderRepository(queries)
	orderCreated := event.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, orderCreated, eventDispatcher)
	getAllOrdersUseCase := usecase.NewGetAllOrdersUseCase(orderRepository)
	getOrderByIdUseCase := usecase.NewGetOrderByIdUseCase(orderRepository)
	webOrderHandler := web_handler.NewWebOrderHandler(createOrderUseCase, getAllOrdersUseCase, getOrderByIdUseCase)
	return webOrderHandler
}

func NewGraphQLResolver(db2 db.DBTX, eventDispatcher events.EventDispatcherInterface) *graph.Resolver {
	queries := db.New(db2)
	orderRepository := repository.NewOrderRepository(queries)
	orderCreated := event.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, orderCreated, eventDispatcher)
	getAllOrdersUseCase := usecase.NewGetAllOrdersUseCase(orderRepository)
	getOrderByIdUseCase := usecase.NewGetOrderByIdUseCase(orderRepository)
	resolver := graph.NewResolver(createOrderUseCase, getAllOrdersUseCase, getOrderByIdUseCase)
	return resolver
}

func NewGrpcService(db2 db.DBTX, eventDispatcher events.EventDispatcherInterface) *grpc_service.OrderService {
	queries := db.New(db2)
	orderRepository := repository.NewOrderRepository(queries)
	orderCreated := event.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, orderCreated, eventDispatcher)
	getAllOrdersUseCase := usecase.NewGetAllOrdersUseCase(orderRepository)
	getOrderByIdUseCase := usecase.NewGetOrderByIdUseCase(orderRepository)
	orderService := grpc_service.NewOrderService(createOrderUseCase, getAllOrdersUseCase, getOrderByIdUseCase)
	return orderService
}
